'use strict';
var React = require('react');
var Slide = require('../component_slider/slide');
var Markdown = require('./markdown');
var {CodeBlock, Prompt, Output} = require('./codeblock');
var FileBlock = require('./fileblock');

module.exports = React.createClass ({
    render() {
      return (
        <Slide>
          <h1>Let&apos;s create an example application</h1>
          <p>To check if every part of your cluster is running as it should, let&apos;s create an entire application. When set up, this application will provide a little web server running in multiple pods.</p>
          <p>Here is the manifest we need:</p>

          <FileBlock fileName="helloworld-manifest.yaml">
          {`
          apiVersion: v1
          kind: Service
          metadata:
            name: helloworld
            labels:
              app: helloworld
          spec:
            ports:
            - port: 80
              targetPort: 8080
            selector:
              app: helloworld
          ---
          apiVersion: extensions/v1beta1
          kind: Deployment
          metadata:
            name: helloworld
            labels:
              app: helloworld
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: helloworld
            template:
              metadata:
                labels:
                  app: helloworld
              spec:
                containers:
                - name: helloworld
                  image: giantswarm/helloworld:latest
                  ports:
                  - containerPort: 8080
          `}
          </FileBlock>

          <p>Save the above manifest in a file called <code>helloworld-manifest.yaml</code>.</p>
          <p>üê£  If you&apos;re new to Kubernetes: A manifest describes things to create in Kubernetes. In this case the manifest describes two different things, a service and a deployment. The service is there to expose containers (here: the ones with the label app: helloworld) inside your cluster via a certain hostname and port. The deployment describes your helloworld deployment. It manages a replica set, which ensures that a number of pods (two, actually) containing Docker containers from a certain image are running.</p>
          <p>Now use <code>kubectl</code> to create the service and the deployment:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl create -f helloworld-manifest.yaml`}
            </Prompt>
            <Output>
              {`
                service "helloworld" created
                deployment "helloworld" created
              `}
            </Output>
          </CodeBlock>

          <p>The deployment will create a replica set, which in turn will create pods with the Docker containers running. Once they are up, which should take only a few seconds, you can access them using this URL:</p>

          <a href="http://go9cdgqfnr.giantswarm-kaas.io/api/v1/proxy/namespaces/default/services/helloworld/" target="_blank">http://go9cdgqfnr.giantswarm-kaas.io/api/v1/proxy/namespaces/default/services/helloworld/</a>

          <p>This should show a little welcome message from the Giant Swarm team.</p>

          <p>Let's inspect what has actually been generated by Kubernetes based on our manifest. This first command lists all deployments, filtered to those that have a label app: helloworld:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl get deployment -l app=helloworld`}
            </Prompt>
            <Output>
              {`
                NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
                helloworld   2         2         2            2           2m
              `}
            </Output>
          </CodeBlock>

          <p>It should tell us that 2 of our 2 desired pods are currently running. Then we list the available services with the according label:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl get svc -l app=helloworld`}
            </Prompt>
            <Output>
              {`
                NAME         CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
                helloworld   10.100.70.153   <none>        80/TCP    2m
              `}
            </Output>
          </CodeBlock>

          <p>And finally we list the pods:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl get pods -l app=helloworld`}
            </Prompt>
            <Output>
              {`
                NAME                          READY     STATUS    RESTARTS   AGE
                helloworld-3495070191-0ynir   1/1       Running   0          3m
                helloworld-3495070191-onuik   1/1       Running   0          3m
              `}
            </Output>
          </CodeBlock>

          <p>The exact pod names vary in each case, since Kubernetes attempts to disambiguate the name using unique suffixes. You can also see an additional suffix to the deployment name, which functions a bit like a version number for your deployments. You can see that also in the replica set that got created by the deployment:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl get rs -l app=helloworld`}
            </Prompt>
            <Output>
              {`
                NAME                    DESIRED   CURRENT   AGE
                helloworld-3495070191   2         2         4m
              `}
            </Output>
          </CodeBlock>

          <p>To investigate a bit closer what our containers are doing inside their pods, we can look at their logs, one pod at a time.</p>

          <CodeBlock>
            <Prompt>
              {`kubectl logs helloworld-3495070191-0ynir`}
            </Prompt>
            <Output>
              {`
                2016/05/20 10:00:00 Starting up at :8080
                2016/05/20 10:03:19 GET /
              `}
            </Output>
          </CodeBlock>

          <CodeBlock>
            <Prompt>
              {`kubectl logs helloworld-3495070191-onuik`}
            </Prompt>
            <Output>
              {`
                2016/05/20 10:00:07 Starting up at :8080
                2016/05/20 10:03:19 GET /giantswarm_logo_standard_white.svg
                2016/05/20 10:03:19 GET /blue-bg.jpg
              `}
            </Output>
          </CodeBlock>

          <p>You should see in the log entries that the requests for the HTML page, the logo, and the background images have been distributed over both running pods and their respective containers pretty much randomly.</p>
          <p>To clean things up, we use the kubectl delete command on the service and the deployment we created initially:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl delete svc helloworld`}
            </Prompt>
            <Output>
              {`
                service "helloworld" deleted
              `}
            </Output>
          </CodeBlock>

          <CodeBlock>
            <Prompt>
              {`kubectl delete deployment helloworld`}
            </Prompt>
            <Output>
              {`
                deployment "helloworld" deleted
              `}
            </Output>
          </CodeBlock>

          <p>Congratulations! You have created - and destroyed - your first application on your brand new Kubernetes cluster on Giant Swarm.</p>

          <h3>Next Steps</h3>

          <p>Now that you have a running Kubernetes cluster, you can use it to deploy anything you like on it.</p>

          <p>If you like a nice interface to your cluster, you can easily get the official Kubernetes dashboard running:</p>

          <CodeBlock>
            <Prompt>
              {`kubectl create -f`}
            </Prompt>
            <Output>
              {`
                https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml
              `}
            </Output>
          </CodeBlock>

          <p>Wait a few seconds and you can access the UI at:</p>

          <p>
            <a href="http://go9cdgqfnr.giantswarm-kaas.io/ui/">http://go9cdgqfnr.giantswarm-kaas.io/ui/</a>
          </p>

          <p>We recommend to <a href="https://blog.giantswarm.io/getting-started-with-a-local-kubernetes-environment/" target="_blank">choose a local development environment</a> so you can test your apps before deploying to your Giant Swarm cluster. </p>

          <p>If you have not done so already, you should get acquainted with the <a href="https://blog.giantswarm.io/understanding-basic-kubernetes-concepts-i-introduction-to-pods-labels-replicas/" target="_blank">basic concepts of Kubernetes</a>.</p>

          <h3>Further Reading</h3>

          <ul>
            <li><a href="http://kubernetes.io/docs/" target="_blank">Official Kubernetes Documentation</a></li>
            <li>
              Useful Primitives
              <ul>
                <li><a href="http://kubernetes.io/docs/user-guide/pods/" target="_blank">Pods</a></li>
                <li><a href="http://kubernetes.io/docs/user-guide/labels/" target="_blank">Labels & Selectors</a></li>
                <li><a href="http://kubernetes.io/docs/user-guide/replicasets/" target="_blank">Replica Sets</a></li>
                <li><a href="http://kubernetes.io/docs/user-guide/deployments/" target="_blank">Deployments</a></li>
                <li><a href="http://kubernetes.io/docs/user-guide/services/" target="_blank">Services</a></li>
                <li><a href="http://kubernetes.io/docs/user-guide/secrets/" target="_blank">Secrets</a></li>
                <li><a href="http://kubernetes.io/docs/user-guide/namespaces/" target="_blank">Namespaces</a></li>
                <li><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/cluster/addons/dns/README.md" target="_blank">DNS</a></li>
              </ul>
            </li>
          </ul>

          <button onClick={this.props.onPrevious}>Previous</button>
        </Slide>
      );
    }
});